from django.shortcuts import render
from django.http import HttpResponse
from rest_framework import generics
from .models import redhatsa
from .serializers import RedhatSerializer
from rest_framework.views import APIView
import json
import datetime
from rest_framework import viewsets
from .models import redhatsa
import requests
from rest_framework.response import Response
from django.http import JsonResponse


#open dataBase connection
import configparser

import mysql.connector

def home (request):
    return HttpResponse('home page')


class RedHatData(APIView):
    def get(self, request):
        url = 'https://dn6mqn7xvzz3.statuspage.io/api/v2/summary.json'
        headers = {
            'accept': '*/*',
            'accept-encoding': 'gzip, deflate, br',
            'accept-language': 'fr-TN,fr;q=0.9,fr-FR;q=0.8,en-US;q=0.7,en;q=0.6,gl;q=0.5,ar;q=0.4',
            'cache-control': 'no-cache',
            'origin': 'https://access.redhat.com',
            'pragma': 'no-cache',
            'referer': 'https://access.redhat.com/',
            'sec-ch-ua': '"Chromium";v="110", "Not A;Brand";v="24", "Google Chrome";v="110"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': 'Windows',
            'sec-fetch-dest': 'empty',
            'sec-fetch-mode': 'cors',
            'sec-fetch-site': 'cross-site',
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36'
        }
        response = requests.get(url, headers=headers)
        Code_json = json.loads(response.text)
        components = Code_json.get('components')
        page = Code_json.get('page')

        def get_date(item):
            date_str = item.get('updated_at')
            date_str = date_str.replace(date_str[-6:], 'Z')
            return datetime.datetime.strptime(date_str, '%Y-%m-%dT%H:%M:%S.%fZ')



        sorted_res =sorted(components, key=get_date, reverse=True)
        
        j=0

        for item in sorted_res :
         ID= item.get('id')
         name = item.get('name')
         status = item.get('status')
         updated_at = item.get('updated_at')
         created_at = item.get('created_at')
         position = item.get('position')

        print('ID= ' + ID, 'name= ' + name, 'status= ' + status, 'updated_at= ' + updated_at, 'created_at=' +created_at)
        j+=1


        db= mysql.connector.connect(
          host="localhost",
          user="root",
          password="12345",
          database="biats")
        cursor= db.cursor() 


        with db.cursor() as cursor:
         for component in components:
          ID = component.get('id')
          name = component.get('name')
          status = component.get('status')
          created_at_str=component.get('created_at').replace(component.get('created_at')[-6:], 'Z')
          created_at=datetime.datetime.strptime(created_at_str,'%Y-%m-%dT%H:%M:%S.%fZ')
          position= item.get('position')
          description = component.get('description')

          showcase=item.get('showcase')
          updated_at_str = component.get('updated_at').replace(component.get('updated_at')[-6:], 'Z')
          updated_at = datetime.datetime.strptime(updated_at_str, '%Y-%m-%dT%H:%M:%S.%fZ')
          group_id = component.get('group_id')
          page_id = component.get('page_id')
          is_group = component.get('group')
          only_show_if_degraded = component.get('only_show_if_degraded')
          start_date_str = component.get('start_date')
          if start_date_str:
        # start_date_str = start_date_str.replace(start_date_str[-6:], '')
           start_date = datetime.datetime.strptime(start_date_str, '%Y-%m-%d').strftime('%Y-%m-%d')
          else:
           start_date = None
       
          cursor.execute("""
            INSERT INTO redhat2 (ID, name, status, created_at, updated_at, position, description, showcase, start_date, group_id, page_id, is_group, only_show_if_degraded)
             VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s,%s)
            ON DUPLICATE KEY UPDATE
                name=VALUES(name),
                status=VALUES(status),
                created_at=VALUES(created_at),
                updated_at=VALUES(updated_at),
                position=VALUES(position),
                description=VALUES(description),
                showcase=VALUES(showcase),
                start_date=VALUES(start_date),
                group_id=VALUES(group_id),
                page_id=VALUES(page_id),
                is_group=VALUES(is_group),
                only_show_if_degraded=VALUES(only_show_if_degraded)
        """, (ID, name, status, created_at, updated_at, position, description, showcase, start_date, group_id, page_id, is_group, only_show_if_degraded))
          data = {
           "components": components,
           "page": page
}
        db.commit()
        db.close()
        return JsonResponse(data, safe=False)



class RedHatCVE(APIView):
   def get (self, request):
      url ="https://dn6mqn7xvzz3.statuspage.io/api/v2/summary.json"


      return JsonResponse()



def cisco (request):
    return HttpResponse('cisco page')
# Create your views here.
